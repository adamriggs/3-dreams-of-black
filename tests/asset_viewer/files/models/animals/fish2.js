// Converted from: ../files/srcModels/02_life_soup/fish/fishB_swimA/fishB_swimA_v005/obj/fishB_swimA_001.obj
//  vertices: 118
//  faces: 232
//  normals: 0
//  colors: 3
//  uvs: 152
//  materials: 1
//  edges: 0
//
//  Generated with OBJ -> Three.js converter
//  http://github.com/alteredq/three.js/blob/master/utils/exporters/convert_obj_three.py


var model = {

    "version" : 2,
    
    "scale" : 1.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "comp_fish1_rig:lambert3SG",
	"vertexColors" : "face"
	}],

    "vertices": [],
    
    "morphTargets": [
	{ "name": "fishB_swimA_001", "vertices": [] },
	{ "name": "fishB_swimA_002", "vertices": [] },
	{ "name": "fishB_swimA_003", "vertices": [] },
	{ "name": "fishB_swimA_004", "vertices": [] },
	{ "name": "fishB_swimA_005", "vertices": [] },
	{ "name": "fishB_swimA_006", "vertices": [] },
	{ "name": "fishB_swimA_007", "vertices": [] },
	{ "name": "fishB_swimA_008", "vertices": [] },
	{ "name": "fishB_swimA_009", "vertices": [] },
	{ "name": "fishB_swimA_010", "vertices": [] },
	{ "name": "fishB_swimA_011", "vertices": [] },
	{ "name": "fishB_swimA_012", "vertices": [] },
	{ "name": "fishB_swimA_013", "vertices": [] },
	{ "name": "fishB_swimA_014", "vertices": [] },
	{ "name": "fishB_swimA_015", "vertices": [] },
	{ "name": "fishB_swimA_016", "vertices": [] },
	{ "name": "fishB_swimA_017", "vertices": [] },
	{ "name": "fishB_swimA_018", "vertices": [] },
	{ "name": "fishB_swimA_019", "vertices": [] }
	],

    "morphColors": [
	{ "name": "fishB_colorMap", "colors}
	],

    "normals": [],

    "colors": [9895680,56319,0],

    "uvs": [[0.751441,0.590070,0.747098,0.467632,0.830797,0.597391,0.833852,0.351463,0.932619,0.564943,0.903926,0.622123,0.938502,0.432584,0.907662,0.289708,0.932063,0.368237,0.227480,0.374702,0.123035,0.584636,0.137441,0.543639,0.159004,0.489420,0.170599,0.466156,0.096922,0.677204,0.101195,0.607646,0.284083,0.286069,0.378177,0.173864,0.660414,0.104409,0.776677,0.097023,0.745161,0.280281,0.246355,0.332915,0.709270,0.767029,0.781194,0.895169,0.696133,0.902977,0.843986,0.872121,0.524745,0.131683,0.124210,0.718027,0.139173,0.778649,0.228332,0.833905,0.332445,0.870237,0.441155,0.878427,0.489878,0.839389,0.550403,0.886382,0.227346,0.801288,0.331239,0.843817,0.325169,0.763567,0.224056,0.733802,0.315069,0.586626,0.230876,0.575349,0.256626,0.421942,0.322573,0.401308,0.341541,0.268007,0.264565,0.336801,0.562341,0.715546,0.576523,0.783017,0.675966,0.725047,0.689606,0.633976,0.554705,0.589938,0.691962,0.550373,0.574613,0.313468,0.570578,0.435518,0.688939,0.488385,0.670109,0.403537,0.749870,0.558174,0.750728,0.532703,0.751830,0.500023,0.839985,0.535931,0.840844,0.482158,0.841946,0.413166,0.143514,0.623055,0.148207,0.730732,0.149524,0.577502,0.183740,0.461584,0.129012,0.608853,0.124755,0.703900,0.672799,0.746192,0.587025,0.794853,0.633121,0.861715,0.715839,0.826471,0.455692,0.758634,0.447748,0.838540,0.474994,0.821380,0.460220,0.591401,0.466893,0.408280,0.495095,0.279420,0.331239,0.843817,0.325169,0.763567,0.227346,0.801288,0.224056,0.733802,0.315069,0.586626,0.230876,0.575349,0.256626,0.421942,0.322573,0.401308,0.264565,0.336801,0.341541,0.268007,0.576523,0.783017,0.675966,0.725047,0.562341,0.715546,0.689606,0.633976,0.554705,0.589938,0.691962,0.550373,0.574613,0.313468,0.570578,0.435518,0.670109,0.403537,0.688939,0.488385,0.751441,0.590070,0.749870,0.558174,0.750728,0.532703,0.747098,0.467632,0.751830,0.500023,0.830797,0.597391,0.839985,0.535931,0.840844,0.482158,0.841946,0.413166,0.833852,0.351463,0.903926,0.622123,0.938502,0.432584,0.932619,0.564943,0.907662,0.289708,0.148207,0.730732,0.143514,0.623055,0.149524,0.577502,0.227480,0.374702,0.183740,0.461584,0.129012,0.608853,0.124755,0.703900,0.137441,0.543639,0.123035,0.584636,0.170599,0.466156,0.159004,0.489420,0.101195,0.607646,0.096922,0.677204,0.284083,0.286069,0.378177,0.173864,0.776677,0.097023,0.660414,0.104409,0.745161,0.280281,0.246355,0.332915,0.715839,0.826471,0.587025,0.794853,0.633121,0.861715,0.672799,0.746192,0.709270,0.767029,0.781194,0.895169,0.696133,0.902977,0.843986,0.872121,0.932063,0.368237,0.455692,0.758634,0.447748,0.838540,0.474994,0.821380,0.460220,0.591401,0.466893,0.408280,0.495095,0.279420,0.524745,0.131683,0.124210,0.718027,0.139173,0.778649,0.228332,0.833905,0.332445,0.870237,0.441155,0.878427,0.489878,0.839389,0.550403,0.886382]],

    "faces": [],

    "edges" : []

};

var req = new XMLHttpRequest();
req.open('GET', "fish2.txt", false);
req.send(null);
if (req.status == 200 || req.status == 0) {
  var numVertices = 354;
  var numMorphTargets = model.morphTargets.length;
  var scale = 0.936166109375;
  model.vertices = new Float32Array(numVertices);
  for (var j = 0; j < numMorphTargets; ++j) {
    model.morphTargets[j].vertices = new Float32Array(numVertices);
  }

  var untransposed = new Int16Array(numVertices);
  var transposeOffset = numVertices / 3;
  var prevX = 0, prevY = 0, prevZ = 0;
  for (var i = 0; i < transposeOffset; ++i) {
    var x = req.responseText.charCodeAt(i);
    x = (x >> 1) ^ (-(x & 1));
    prevX += x;
    untransposed[3*i] = prevX;
    var y = req.responseText.charCodeAt(transposeOffset + i);
    y = (y >> 1) ^ (-(y & 1));
    prevY += y;
    untransposed[3*i + 1] = prevY;
    var z = req.responseText.charCodeAt(2*transposeOffset + i);
    z = (z >> 1) ^ (-(z & 1));
    prevZ += z;
    untransposed[3*i + 2] = prevZ;
  }

  for (var i = 0; i < numVertices; ++i) {
    var word = untransposed[i];
    model.vertices[i] = scale * word;

    var prev = word;
    for (var j = 0; j < numMorphTargets; ++j) {
      var offset = (j + 1) * numVertices;
      var delta = req.responseText.charCodeAt(offset + i);
      delta = (delta >> 1) ^ (-(delta & 1));
      prev += delta;
      model.morphTargets[j].vertices[i] = scale * prev;
    }
  }
  var faceOffset = numVertices * (numMorphTargets + 1);
  var numFaces = 2088;
  model.faces = new Uint16Array(numFaces);
  for (var i = 0; i < numFaces; ++i) {
    model.faces[i] = req.responseText.charCodeAt(faceOffset + i);
  }
}

postMessage( model );
close();
