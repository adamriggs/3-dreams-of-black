function ShellWriter(file) {    this.json = file;    this.file = new File(file.path + "/" + file.name.substring(0, file.name.length - 3) + "Assets.sh");    this.file.encoding = "ASCII";    this.file.lineFeed = "Unix";    this.file.open("w:");}ShellWriter.prototype.write = function(layers) {        this.file.writeln("# Batch script exported from AE");    this.file.writeln("#");    this.file.writeln("");      this.file.writeln("echo 'Cleaning folder from all image/video files'");    this.file.writeln("rm -f *.png *.jpg *.webm");    this.file.writeln("");         var exported = {};        for(var i = 0; i < layers.length; i++) {        var ly = layers[i];        if(ly.isVisible() && ly.isAsset()) {            var seq    = ly.isSequence();            var fps    = ly.layer.source.mainSource.displayFrameRate;            var alpha  = (ly.hasAlpha) ? " -a " : " ";            var vid    = !ly.layer.source.hasVideo;            var solid  = ly.layer.source.mainSource instanceof SolidSource;                                    var path   = ly.layer.source.mainSource.file.path;            var fname  = ly.layer.source.mainSource.file.name;            var fid    = ly.uniqueSourceName();                        var width  = ly.layer.source.width;            var height = ly.layer.source.height;                        var imgScale = (ExportSettings.widthThreshold / width).toFixed(3);            var vidScale = (ExportSettings.videoWidthThreshold / width).toFixed(3);            var shsScale = (ExportSettings.shsWidthThreshold / width).toFixed(3);                        imgScale = Math.min(1, imgScale);            vidScale = Math.min(1, vidScale);            shsScale = Math.min(1, shsScale);            var missing = ly.layer.source.footageMissing;            var commentOut = (missing) ? "# " : "";            var misWarn = (missing) ? " !! MISSING FILE !! " : "";                        var expPath = this.json.path + "/";            var seqPath = expPath + ly.uniqueSourceName();                        var alpha = (ly.hasAlpha()) ? "" : " -a";                        if(exported[fid]) continue;                        // Is sequence            if(seq && !vid) {                this.file.writeln("# Sequence: " + fid + " [" + width + " x " + height + "]" + misWarn);                this.file.writeln(commentOut + "mkdir " + seqPath);                this.file.writeln(commentOut + "echo 'Copying sequence files'");                this.file.writeln(commentOut + "cp -f " + path + "/*.png " + seqPath);                this.file.writeln(commentOut + "echo 'Creating sprite sheet'");                this.file.writeln(commentOut + "makess.py " + shsScale + " " + seqPath + "/ " + this.json.absoluteURI + " " + ly.uniqueSourceName());                this.file.writeln(commentOut + "echo 'Resizing sequence files for webm encoding'");                this.file.writeln(commentOut + "twosided.py " + vidScale + " " + seqPath + "/");                this.file.writeln(commentOut + "echo 'Encoding webm file'");                this.file.writeln(commentOut + "ffmpeg -i " + seqPath + "/" + ly.sequenceWildcard() + " -r " + fps + " -sameq " + expPath + "/" + ly.webmFileName() + " 2>/dev/null");                this.file.writeln(commentOut + "echo 'Cleaning sequence files'");                this.file.writeln(commentOut + "rm -r " + seqPath);                this.file.writeln("");            }                    // Is still image            if(!seq && !solid && !vid) {                this.file.writeln("# Image: " + fid + "[" + width + " x " + height + "]" + misWarn);                this.file.writeln(commentOut + "cp -f " + path +"/" + fname + " " + expPath);                this.file.writeln(commentOut + "echo 'Processing image'");                this.file.writeln(commentOut + "twosided.py " + imgScale + " " + expPath + fname + " -j" + alpha); // -j = Always export stills as double JPEG                this.file.writeln("");            }                    // Is video?            if(vid && !seq) {                this.file.writeln("# Video not supported. File: " + path + "/" + fname + misWarn);            }                    exported[fid] = true;        }    }        this.file.close();}