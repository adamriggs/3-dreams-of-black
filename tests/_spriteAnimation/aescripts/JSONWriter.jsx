JSONWriter.TAB = "\t";function JSONWriter(file) {    this.file = file;    this.indent = 0;}JSONWriter.prototype.write = function(obj, name) {    this.recurseObject(obj, name, true);}JSONWriter.prototype.recurseObject = function(obj, name, topLevel) {    var s = (topLevel) ? " = " : ": ";    var c = (topLevel) ? "" : ",";        if(obj instanceof Array) {                      var hasObjects = false;        for(var i = 0; i < obj.length; i++) {            hasObjects = hasObjects || typeof(obj[i]) == "object";        }            if(hasObjects) {            if(name) this.writeln(name + s + "[");            else this.writeln("[");            this.indent++;                        for(var i = 0; i < obj.length; i++) {                this.recurseObject(obj[i]);            }                    this.indent--;            this.writeln("]" + c);        } else {            var inline = "";            if(name) inline += name + s + "[";            else inline += "[";                        for(var i = 0; i < obj.length; i++) {                 inline += this.formatPrimitive(obj[i]);                 if(i < obj.length - 1) inline += ", ";            }                    inline += "]" + c;            this.writeln(inline);        }         } else if(obj instanceof Object) {        if(name) this.writeln(name + s +  "{");        else this.writeln("{");        this.indent++;                for(var propName in obj) {            this.recurseObject(obj[propName], propName);        }                this.indent--;        this.writeln("}" + c);            } else  {        if(name) this.writeln(name + s + this.formatPrimitive(obj) + c);        else this.writeln(this.formatPrimitive(obj) + c);            }}JSONWriter.prototype.formatPrimitive = function(p) {    if(typeof(p) == "string") {        return "\"" + p + "\"";    } else if(typeof(p) == "number") {        if(p.toString().indexOf(".") > -1 && p.toString().indexOf(".") < p.toString().length - 3) return p.toFixed(ExportSettings.floatPrecision);        else return p;    } else {         return p;    }}JSONWriter.prototype.writeln = function(line) {    var tabs = "";    for(var i = 0; i < this.indent; i++) tabs += JSONWriter.TAB;    this.file.writeln (tabs + line);}